/*
  Draw a compass on the screen.

  The sketch has been tested on a 320x240 ILI9341 based TFT, it
  could be adapted for other screen sizes.

  A Sprite is notionally an invisible graphics screen that is
  kept in the processors RAM. Graphics can be drawn into the
  Sprite just as it can be drawn directly to the screen. Once
  the Sprite is completed it can be plotted onto the screen in
  any position. If there is sufficient RAM then the Sprite can
  be the same size as the screen and used as a frame buffer.

  The Sprite occupies (2 * width * height) bytes.

  On a ESP8266 Sprite sizes up to 128 x 160 can be accomodated,
  this size requires 128*160*2 bytes (40kBytes) of RAM, this must be
  available or the processor will crash. You need to make the sprite
  small enough to fit, with RAM spare for any "local variables" that
  may be needed by your sketch and libraries.

  Created by Bodmer 1/12/17

  #########################################################################
  ###### DON'T FORGET TO UPDATE THE User_Setup.h FILE IN THE LIBRARY ######
  #########################################################################
*/

#define BACKGROUND TFT_BLACK

// Pause in milliseconds to set refresh speed
#define WAIT 20

#include <TFT_eSPI.h>                 // Include the graphics library (this includes the sprite functions)

TFT_eSPI    tft = TFT_eSPI();         // Create object "tft"

TFT_eSprite img = TFT_eSprite(&tft);  // Create Sprite object "img" with pointer to "tft" object
                                      // the pointer is used by pushSprite() to push it onto the TFT

int number = 0;
int angle  = 0;

  int lx1 = 0;
  int ly1 = 0;
  int lx2 = 0;
  int ly2 = 0;
  int lx3 = 0;
  int ly3 = 0;
  int lx4 = 0;
  int ly4 = 0;

// Test only
uint16_t  n = 0;
uint32_t dt = 0;

// -------------------------------------------------------------------------
// Setup
// -------------------------------------------------------------------------
void setup(void) {
  Serial.begin(250000);

  tft.init();

  tft.setRotation(0);

  tft.fillScreen(BACKGROUND);
}

// -------------------------------------------------------------------------
// Main loop
// -------------------------------------------------------------------------
void loop() {

  drawCompass(50,50,angle); // Draw centre of compass at 50,50

  angle+=3; //Increment angle for testing

  if (angle > 359) angle = 0; // Limit angle to 360

  delay(WAIT);
}

// Test code to measure runtimes, executes code 100x and shows time taken
#define TSTART //n=100;dt=millis();while(n--){
#define TPRINT //};Serial.println((millis()-dt)/100.0);

// #########################################################################
// Draw compass using the defined transparent colour (takes ~6ms)
// #########################################################################
void drawCompass(int x, int y, int angle)
{
  TSTART
  img.setColorDepth(8);
  img.createSprite(100, 100);

  // TFT_TRANSPARENT is a special colour with reversible 8/16 bit coding
  // this allows it to be used in both 8 and 16 bit colour sprites.
  img.fillSprite(TFT_TRANSPARENT);

  #define NEEDLE_L 84/2  // Needle length is 84, we want radius which is 42
  #define NEEDLE_W 12/2  // Needle width is 12, radius is then 6

  // Draw the old needle position in the screen background colour so
  // it gets erased on the TFT when the sprite is drawn
  img.fillTriangle(lx1,ly1,lx3,ly3,lx4,ly4,BACKGROUND);
  img.fillTriangle(lx2,ly2,lx3,ly3,lx4,ly4,BACKGROUND);

  // Set text coordinate datum to middle centre
  img.setTextDatum(MC_DATUM);
  img.setTextColor(TFT_WHITE);
  
  img.drawString("N",50,50-42,2);
  img.drawString("E",50+42,50,2);
  img.drawString("S",50,50+42,2);
  img.drawString("W",50-42,50,2);

  img.drawCircle(50,50,30,TFT_DARKGREY);

  getCoord(x, y, &lx1, &ly1, NEEDLE_L, angle);
  getCoord(x, y, &lx2, &ly2, NEEDLE_L, angle+180);
  getCoord(x, y, &lx3, &ly3, NEEDLE_W, angle+90);
  getCoord(x, y, &lx4, &ly4, NEEDLE_W, angle-90);
  
  img.fillTriangle(lx1,ly1,lx3,ly3,lx4,ly4,TFT_RED);
  img.fillTriangle(lx2,ly2,lx3,ly3,lx4,ly4,TFT_LIGHTGREY);

  img.fillCircle(50,50,3,TFT_DARKGREY);
  img.fillCircle(50,50,2,TFT_LIGHTGREY);
  
  img.pushSprite(x-50, y-50, TFT_TRANSPARENT);

  // Delete sprite to free up the RAM
  img.deleteSprite();
  TPRINT
}

#define RAD2DEG 0.0174532925

// Get coordinates of end of a vector, centre at x,y, length r, angle a
// Coordinates are returned to caller via the xp and yp pointers
void getCoord(int x, int y, int *xp, int *yp, int r, int a)
{
  float sx1 = cos( (a-90) * RAD2DEG );    
  float sy1 = sin( (a-90) * RAD2DEG );
  *xp =  sx1 * r + x;
  *yp =  sy1 * r + y;
}
